// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTFLAT_JASON_FLAT_TEST_H_
#define FLATBUFFERS_GENERATED_TESTFLAT_JASON_FLAT_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace Jason {
namespace Flat {
namespace Test {

struct TestAppend;

struct TextureData;

struct Texture;

enum Color {
  Color_Red = 1,
  Color_Green = 2,
  Color_Blue = 3,
  Color_MIN = Color_Red,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (e < Color_Red || e > Color_Blue) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(Color_Red);
  return EnumNamesColor()[index];
}

enum Any {
  Any_NONE = 0,
  Any_TextureData = 1,
  Any_Texture = 2,
  Any_MIN = Any_NONE,
  Any_MAX = Any_Texture
};

inline const Any (&EnumValuesAny())[3] {
  static const Any values[] = {
    Any_NONE,
    Any_TextureData,
    Any_Texture
  };
  return values;
}

inline const char * const *EnumNamesAny() {
  static const char * const names[] = {
    "NONE",
    "TextureData",
    "Texture",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  if (e < Any_NONE || e > Any_Texture) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<TextureData> {
  static const Any enum_value = Any_TextureData;
};

template<> struct AnyTraits<Texture> {
  static const Any enum_value = Any_Texture;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct TestAppend FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST_NUM = 4,
    VT_TEST_NUM2 = 6
  };
  int32_t test_num() const {
    return GetField<int32_t>(VT_TEST_NUM, 0);
  }
  int32_t test_num2() const {
    return GetField<int32_t>(VT_TEST_NUM2, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM2) &&
           verifier.EndTable();
  }
};

struct TestAppendBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_test_num(int32_t test_num) {
    fbb_.AddElement<int32_t>(TestAppend::VT_TEST_NUM, test_num, 0);
  }
  void add_test_num2(int32_t test_num2) {
    fbb_.AddElement<int32_t>(TestAppend::VT_TEST_NUM2, test_num2, 0);
  }
  explicit TestAppendBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestAppendBuilder &operator=(const TestAppendBuilder &);
  flatbuffers::Offset<TestAppend> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestAppend>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestAppend> CreateTestAppend(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_num = 0,
    int32_t test_num2 = 0) {
  TestAppendBuilder builder_(_fbb);
  builder_.add_test_num2(test_num2);
  builder_.add_test_num(test_num);
  return builder_.Finish();
}

struct TextureData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGE_SIZE = 4,
    VT_IMAGE_DATA = 6,
    VT_TEST_NUM2 = 8,
    VT_IMAGE_TEST = 10
  };
  int32_t image_size() const {
    return GetField<int32_t>(VT_IMAGE_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *image_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_IMAGE_DATA);
  }
  int32_t test_num2() const {
    return GetField<int32_t>(VT_TEST_NUM2, 0);
  }
  int16_t image_test() const {
    return GetField<int16_t>(VT_IMAGE_TEST, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_IMAGE_SIZE) &&
           VerifyOffset(verifier, VT_IMAGE_DATA) &&
           verifier.VerifyVector(image_data()) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM2) &&
           VerifyField<int16_t>(verifier, VT_IMAGE_TEST) &&
           verifier.EndTable();
  }
};

struct TextureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_image_size(int32_t image_size) {
    fbb_.AddElement<int32_t>(TextureData::VT_IMAGE_SIZE, image_size, 0);
  }
  void add_image_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image_data) {
    fbb_.AddOffset(TextureData::VT_IMAGE_DATA, image_data);
  }
  void add_test_num2(int32_t test_num2) {
    fbb_.AddElement<int32_t>(TextureData::VT_TEST_NUM2, test_num2, 0);
  }
  void add_image_test(int16_t image_test) {
    fbb_.AddElement<int16_t>(TextureData::VT_IMAGE_TEST, image_test, 0);
  }
  explicit TextureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureDataBuilder &operator=(const TextureDataBuilder &);
  flatbuffers::Offset<TextureData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextureData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextureData> CreateTextureData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t image_size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image_data = 0,
    int32_t test_num2 = 0,
    int16_t image_test = 0) {
  TextureDataBuilder builder_(_fbb);
  builder_.add_test_num2(test_num2);
  builder_.add_image_data(image_data);
  builder_.add_image_size(image_size);
  builder_.add_image_test(image_test);
  return builder_.Finish();
}

inline flatbuffers::Offset<TextureData> CreateTextureDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t image_size = 0,
    const std::vector<uint8_t> *image_data = nullptr,
    int32_t test_num2 = 0,
    int16_t image_test = 0) {
  auto image_data__ = image_data ? _fbb.CreateVector<uint8_t>(*image_data) : 0;
  return Jason::Flat::Test::CreateTextureData(
      _fbb,
      image_size,
      image_data__,
      test_num2,
      image_test);
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUM_TEXTURES = 4,
    VT_TEXTURES = 6,
    VT_NUM_TEST = 8,
    VT_NUM_TEST2 = 12,
    VT_TEST_APPEND = 14
  };
  int16_t num_textures() const {
    return GetField<int16_t>(VT_NUM_TEXTURES, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<TextureData>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TextureData>> *>(VT_TEXTURES);
  }
  int16_t num_test() const {
    return GetField<int16_t>(VT_NUM_TEST, 30);
  }
  int16_t num_test2() const {
    return GetField<int16_t>(VT_NUM_TEST2, 0);
  }
  const TestAppend *test_append() const {
    return GetPointer<const TestAppend *>(VT_TEST_APPEND);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEXTURES) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEST) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEST2) &&
           VerifyOffset(verifier, VT_TEST_APPEND) &&
           verifier.VerifyTable(test_append()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_textures(int16_t num_textures) {
    fbb_.AddElement<int16_t>(Texture::VT_NUM_TEXTURES, num_textures, 0);
  }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TextureData>>> textures) {
    fbb_.AddOffset(Texture::VT_TEXTURES, textures);
  }
  void add_num_test(int16_t num_test) {
    fbb_.AddElement<int16_t>(Texture::VT_NUM_TEST, num_test, 30);
  }
  void add_num_test2(int16_t num_test2) {
    fbb_.AddElement<int16_t>(Texture::VT_NUM_TEST2, num_test2, 0);
  }
  void add_test_append(flatbuffers::Offset<TestAppend> test_append) {
    fbb_.AddOffset(Texture::VT_TEST_APPEND, test_append);
  }
  explicit TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureBuilder &operator=(const TextureBuilder &);
  flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t num_textures = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TextureData>>> textures = 0,
    int16_t num_test = 30,
    int16_t num_test2 = 0,
    flatbuffers::Offset<TestAppend> test_append = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_test_append(test_append);
  builder_.add_textures(textures);
  builder_.add_num_test2(num_test2);
  builder_.add_num_test(num_test);
  builder_.add_num_textures(num_textures);
  return builder_.Finish();
}

inline flatbuffers::Offset<Texture> CreateTextureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t num_textures = 0,
    const std::vector<flatbuffers::Offset<TextureData>> *textures = nullptr,
    int16_t num_test = 30,
    int16_t num_test2 = 0,
    flatbuffers::Offset<TestAppend> test_append = 0) {
  auto textures__ = textures ? _fbb.CreateVector<flatbuffers::Offset<TextureData>>(*textures) : 0;
  return Jason::Flat::Test::CreateTexture(
      _fbb,
      num_textures,
      textures__,
      num_test,
      num_test2,
      test_append);
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_TextureData: {
      auto ptr = reinterpret_cast<const TextureData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_Texture: {
      auto ptr = reinterpret_cast<const Texture *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const Jason::Flat::Test::Texture *GetTexture(const void *buf) {
  return flatbuffers::GetRoot<Jason::Flat::Test::Texture>(buf);
}

inline const Jason::Flat::Test::Texture *GetSizePrefixedTexture(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Jason::Flat::Test::Texture>(buf);
}

inline bool VerifyTextureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Jason::Flat::Test::Texture>(nullptr);
}

inline bool VerifySizePrefixedTextureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Jason::Flat::Test::Texture>(nullptr);
}

inline void FinishTextureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Jason::Flat::Test::Texture> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Jason::Flat::Test::Texture> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test
}  // namespace Flat
}  // namespace Jason

#endif  // FLATBUFFERS_GENERATED_TESTFLAT_JASON_FLAT_TEST_H_
