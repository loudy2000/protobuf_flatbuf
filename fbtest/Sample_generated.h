// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"


namespace Sample {

struct Sample;

struct Sample FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t ip() const { return GetField<int32_t>(8, 0); }
  const flatbuffers::Vector<int32_t> *addr_list() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, 8 /* ip */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* addr_list */) &&
           verifier.Verify(addr_list()) &&
           verifier.EndTable();
  }
};

struct SampleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_ip(int32_t ip) { fbb_.AddElement<int32_t>(8, ip, 0); }
  void add_addr_list(flatbuffers::Offset<flatbuffers::Vector<int32_t>> addr_list) { fbb_.AddOffset(10, addr_list); }
  SampleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SampleBuilder &operator=(const SampleBuilder &);
  flatbuffers::Offset<Sample> Finish() {
    auto o = flatbuffers::Offset<Sample>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Sample> CreateSample(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int32_t ip = 0,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> addr_list = 0) {
  SampleBuilder builder_(_fbb);
  builder_.add_addr_list(addr_list);
  builder_.add_ip(ip);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const Sample *GetSample(const void *buf) { return flatbuffers::GetRoot<Sample>(buf); }

inline bool VerifySampleBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Sample>(); }

inline void FinishSampleBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Sample> root) { fbb.Finish(root); }

}  // namespace Sample

#endif  // FLATBUFFERS_GENERATED_SAMPLE_SAMPLE_H_
