// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

struct Sample;

struct Sample FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_IP = 8,
    VT_ADDR_LIST = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t ip() const {
    return GetField<int32_t>(VT_IP, 0);
  }
  const flatbuffers::Vector<int32_t> *addr_list() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ADDR_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_IP) &&
           VerifyOffset(verifier, VT_ADDR_LIST) &&
           verifier.VerifyVector(addr_list()) &&
           verifier.EndTable();
  }
};

struct SampleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Sample::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Sample::VT_NAME, name);
  }
  void add_ip(int32_t ip) {
    fbb_.AddElement<int32_t>(Sample::VT_IP, ip, 0);
  }
  void add_addr_list(flatbuffers::Offset<flatbuffers::Vector<int32_t>> addr_list) {
    fbb_.AddOffset(Sample::VT_ADDR_LIST, addr_list);
  }
  explicit SampleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SampleBuilder &operator=(const SampleBuilder &);
  flatbuffers::Offset<Sample> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Sample>(end);
    return o;
  }
};

inline flatbuffers::Offset<Sample> CreateSample(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t ip = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> addr_list = 0) {
  SampleBuilder builder_(_fbb);
  builder_.add_addr_list(addr_list);
  builder_.add_ip(ip);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Sample> CreateSampleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    int32_t ip = 0,
    const std::vector<int32_t> *addr_list = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto addr_list__ = addr_list ? _fbb.CreateVector<int32_t>(*addr_list) : 0;
  return CreateSample(
      _fbb,
      id,
      name__,
      ip,
      addr_list__);
}

inline const Sample *GetSample(const void *buf) {
  return flatbuffers::GetRoot<Sample>(buf);
}

inline const Sample *GetSizePrefixedSample(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sample>(buf);
}

inline bool VerifySampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sample>(nullptr);
}

inline bool VerifySizePrefixedSampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sample>(nullptr);
}

inline void FinishSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sample> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SAMPLE_H_
